import { execSync } from "child_process";
import fs from "fs-extra";
import path from "path";

export const fontConverter = {
  name: "font-converter",
  enforce: "pre",
  async buildStart() {
    console.log("üî§ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é —à—Ä–∏—Ñ—Ç–æ–≤ –∏–∑ TTF –≤ WOFF/WOFF2...");
    const fontDir = "./src/fonts";
    const outputDir = "./public/fonts";

    if (!fs.existsSync(fontDir)) {
      console.log("‚ùå –ü–∞–ø–∫–∞ —Å–æ —à—Ä–∏—Ñ—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:", fontDir);
      return;
    }

    const ttfFiles = fs
      .readdirSync(fontDir)
      .filter((file) => /\.ttf$/i.test(file));

    console.log(`üî§ –ù–∞–π–¥–µ–Ω–æ ${ttfFiles.length} TTF —à—Ä–∏—Ñ—Ç–æ–≤ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏`);

    fs.removeSync(outputDir);
    fs.ensureDirSync(outputDir);

    for (const ttfFile of ttfFiles) {
      const ttfPath = path.join(fontDir, ttfFile);
      const fontName = path.parse(ttfFile).name;

      try {
        console.log(`üî§ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º: ${ttfFile}`);

        // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ WOFF
        const woffFile = `${fontName}.woff`;
        const woffPath = path.join(outputDir, woffFile);
        try {
          execSync(`npx ttf2woff "${ttfPath}" "${woffPath}"`, {
            stdio: "inherit",
          });
          console.log(`‚úÖ –°–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω WOFF: ${woffFile}`);
        } catch (error) {
          console.log(
            `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ WOFF: ${ttfFile}`,
            error.message
          );
        }

        // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ WOFF2
        const woff2File = `${fontName}.woff2`;
        const woff2Path = path.join(outputDir, woff2File);
        try {
          execSync(
            `pyftsubset "${ttfPath}" --output-file="${woff2Path}" --flavor=woff2`,
            { stdio: "inherit" }
          );
          console.log(`‚úÖ –°–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω WOFF2: ${woff2File}`);
        } catch (error) {
          console.log(
            `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ WOFF2: ${ttfFile}`,
            error.message
          );
          // Fallback: –∫–æ–ø–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π WOFF2, –µ—Å–ª–∏ –µ—Å—Ç—å
          const existingWoff2 = fs
            .readdirSync(fontDir)
            .find((f) => f.includes(fontName) && f.endsWith(".woff2"));
          if (existingWoff2) {
            fs.copySync(path.join(fontDir, existingWoff2), woff2Path);
            console.log(`‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π WOFF2: ${existingWoff2}`);
          }
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ${ttfFile}:`, error.message);
      }
    }
    console.log("üî§ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —à—Ä–∏—Ñ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
  },
};
