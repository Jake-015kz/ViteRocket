import fs from "fs-extra";
import path from "path";

export const fontInjector = {
  name: "font-injector",
  transform(src, id) {
    if (id.endsWith(".scss")) {
      console.log("üî§ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º —à—Ä–∏—Ñ—Ç—ã –≤ CSS...");

      // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ @font-face –ø—Ä–∞–≤–∏–ª–∞ —Å format("truetype")
      const cleanedSrc = src
        .replace(/@font-face\s*\{[^}]*format\(["']truetype["']\)[^}]*\}/gi, "")
        .trim();

      const fontsDir = "./public/fonts";
      if (!fs.existsSync(fontsDir)) {
        console.log("‚ùå –ü–∞–ø–∫–∞ —Å–æ —à—Ä–∏—Ñ—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
        return cleanedSrc;
      }

      const fontFiles = fs.readdirSync(fontsDir);
      const fontFaces = [];
      const fontMap = new Map(); // –î–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —à—Ä–∏—Ñ—Ç–æ–≤ –ø–æ –∏–º–µ–Ω–∏, –≤–µ—Å—É –∏ —Å—Ç–∏–ª—é

      fontFiles.forEach((file) => {
        const ext = path.extname(file).toLowerCase();
        if (ext !== ".woff" && ext !== ".woff2") return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º TTF –∏ –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã

        const name = path.basename(file, ext);
        let weight = 400;
        let style = "normal";

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Å –∏ —Å—Ç–∏–ª—å —à—Ä–∏—Ñ—Ç–∞
        if (name.match(/bold/i)) weight = 700;
        else if (name.match(/light/i)) weight = 300;
        else if (name.match(/medium/i)) weight = 500;
        else if (name.match(/regular/i)) weight = 400;

        if (name.match(/italic/i) || name.match(/oblique/i)) style = "italic";

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤–æ–µ –∏–º—è —à—Ä–∏—Ñ—Ç–∞
        const baseName =
          name
            .replace(/(bold|light|medium|regular|italic|oblique)/gi, "")
            .replace(/-$/, "")
            .trim() || "Font"; // –ó–∞–ø–∞—Å–Ω–æ–µ –∏–º—è, –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç–æ–π

        const key = `${baseName}-${weight}-${style}`;
        if (!fontMap.has(key)) {
          fontMap.set(key, {
            baseName,
            weight,
            style,
            formats: [],
          });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç —à—Ä–∏—Ñ—Ç–∞
        fontMap
          .get(key)
          .formats.push({ file, format: ext === ".woff2" ? "woff2" : "woff" });
      });

      // –§–æ—Ä–º–∏—Ä—É–µ–º @font-face –ø—Ä–∞–≤–∏–ª–∞
      fontMap.forEach(({ baseName, weight, style, formats }) => {
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç—ã, —á—Ç–æ–±—ã WOFF2 –±—ã–ª –ø–µ—Ä–≤—ã–º
        const src = formats
          .sort((a, b) => (a.format === "woff2" ? -1 : 1)) // WOFF2 –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
          .map(
            ({ file, format }) => `url('../fonts/${file}') format('${format}')`
          )
          .join(", ");

        fontFaces.push(
          `
          @font-face {
            font-family: "${baseName}";
            src: ${src};
            font-weight: ${weight};
            font-style: ${style};
            font-display: swap;
          }
        `.trim()
        );
      });

      if (fontFaces.length > 0) {
        console.log(`üî§ –î–æ–±–∞–≤–ª–µ–Ω–æ ${fontFaces.length} @font-face –ø—Ä–∞–≤–∏–ª`);
        return `@charset "UTF-8";\n\n${fontFaces.join(
          "\n\n"
        )}\n\n${cleanedSrc}`;
      } else {
        console.log("‚ö†Ô∏è –®—Ä–∏—Ñ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ CSS");
        return cleanedSrc;
      }
    }
    return src;
  },
};
