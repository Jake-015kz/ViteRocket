import fs from "fs-extra";
import path from "path";
import { optimize } from "svgo";

export const svgSpriteGenerator = {
  name: "svg-sprite-generator",

  // –î–ª—è build —Ä–µ–∂–∏–º–∞
  generateBundle() {
    console.log("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SVG —Å–ø—Ä–∞–π—Ç...");

    const iconsDir = path.resolve("src/img/icons");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ —Å –∏–∫–æ–Ω–∫–∞–º–∏
    if (!fs.existsSync(iconsDir)) {
      console.log(
        "üìÅ –ü–∞–ø–∫–∞ —Å –∏–∫–æ–Ω–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–ø—Ä–∞–π—Ç–∞"
      );
      return;
    }

    const files = fs.readdirSync(iconsDir).filter((f) => f.endsWith(".svg"));

    if (files.length === 0) {
      console.log("‚ÑπÔ∏è SVG –∏–∫–æ–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–ø—Ä–∞–π—Ç–∞");
      return;
    }

    console.log(`üé® –ù–∞–π–¥–µ–Ω–æ ${files.length} SVG –∏–∫–æ–Ω–æ–∫ –¥–ª—è —Å–ø—Ä–∞–π—Ç–∞`);

    let sprite = `<svg xmlns="http://www.w3.org/2000/svg" style="display:none">\n`;

    for (const file of files) {
      try {
        const filePath = path.join(iconsDir, file);
        const content = fs.readFileSync(filePath, "utf8");

        // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º SVG
        const optimized = optimize(content, {
          plugins: [
            { name: "removeDimensions" },
            { name: "removeStyleElement" },
            { name: "removeScriptElement" },
            { name: "removeTitle" },
            { name: "removeDesc" },
          ],
        });

        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–µ–∂–¥—É —Ç–µ–≥–∞–º–∏ svg
        const body = optimized.data
          .replace(/<svg[^>]*>/, "")
          .replace(/<\/svg>/, "")
          .trim();

        // –ò–∑–≤–ª–µ–∫–∞–µ–º viewBox –∏–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const viewBoxMatch = optimized.data.match(/viewBox="([^"]+)"/);
        const viewBox = viewBoxMatch ? viewBoxMatch[1] : "0 0 24 24";

        const name = path.parse(file).name;

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª –≤ —Å–ø—Ä–∞–π—Ç
        sprite += `  <symbol id="icon-${name}" viewBox="${viewBox}">${body}</symbol>\n`;
        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∏–∫–æ–Ω–∫–∞: ${name}`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${file}:`, error.message);
      }
    }

    sprite += `</svg>`;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø—Ä–∞–π—Ç –∫–∞–∫ asset –≤ dist
    this.emitFile({
      type: "asset",
      fileName: "img/sprite.svg",
      source: sprite,
    });

    console.log("‚úÖ SVG —Å–ø—Ä–∞–π—Ç —Å–æ–∑–¥–∞–Ω: dist/img/sprite.svg");
  },

  // –î–ª—è dev —Ä–µ–∂–∏–º–∞ - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø—Ä–∞–π—Ç –≤ public
  buildStart() {
    if (process.env.NODE_ENV === "development") {
      console.log("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SVG —Å–ø—Ä–∞–π—Ç –¥–ª—è dev...");

      const iconsDir = path.resolve("src/img/icons");

      if (!fs.existsSync(iconsDir)) {
        return;
      }

      const files = fs.readdirSync(iconsDir).filter((f) => f.endsWith(".svg"));

      if (files.length === 0) {
        return;
      }

      let sprite = `<svg xmlns="http://www.w3.org/2000/svg" style="display:none">\n`;

      for (const file of files) {
        try {
          const filePath = path.join(iconsDir, file);
          const content = fs.readFileSync(filePath, "utf8");
          const optimized = optimize(content, {
            plugins: [{ name: "removeDimensions" }],
          });

          const body = optimized.data
            .replace(/<svg[^>]*>/, "")
            .replace(/<\/svg>/, "")
            .trim();

          const viewBox =
            optimized.data.match(/viewBox="([^"]+)"/)?.[1] || "0 0 24 24";
          const name = path.parse(file).name;

          sprite += `  <symbol id="icon-${name}" viewBox="${viewBox}">${body}</symbol>\n`;
        } catch (error) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤ dev —Ä–µ–∂–∏–º–µ
        }
      }

      sprite += `</svg>`;

      const outputPath = "public/img/sprite.svg";
      fs.ensureDirSync(path.dirname(outputPath));
      fs.writeFileSync(outputPath, sprite);
    }
  },
};
