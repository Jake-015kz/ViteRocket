import fs from "fs-extra";
import { glob } from "glob";
import path from "path";

export const earlyScssTransformer = {
  name: "early-scss-transformer",

  buildStart() {
    console.log("üé® –†–∞–Ω–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ SCSS —Ñ–∞–π–ª–æ–≤...");
    console.log("NODE_ENV:", process.env.NODE_ENV);

    if (process.env.NODE_ENV !== "production") {
      console.log("‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º - –Ω–µ production —Ä–µ–∂–∏–º");
      return;
    }

    // –ò—â–µ–º –≤—Å–µ SCSS —Ñ–∞–π–ª—ã
    const scssFiles = glob.sync("src/scss/**/*.scss");

    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ SCSS —Ñ–∞–π–ª–æ–≤: ${scssFiles.length}`);

    if (scssFiles.length === 0) {
      console.log("‚ùå SCSS —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
      return;
    }

    let totalFilesProcessed = 0;
    let totalTransformations = 0;

    scssFiles.forEach((file) => {
      console.log(`\nüîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: ${path.basename(file)}`);

      try {
        let content = fs.readFileSync(file, "utf-8");
        let transformed = false;
        let transformCount = 0;

        // üîç –î–ï–ë–ê–ì: –ü–æ–∫–∞–∂–µ–º –≤—Å–µ background-image –≤ —Ñ–∞–π–ª–µ
        const bgImages = content.match(
          /background-image:[^;]*url\([^)]+\)[^;]*;/gi
        );
        if (bgImages) {
          console.log(`üîç –ù–∞–π–¥–µ–Ω—ã background-image:`, bgImages.length);
          bgImages.forEach((bg, index) => {
            console.log(`   ${index + 1}: ${bg}`);
          });
        }

        // üîß –ò–©–ï–ú –ö–û–ù–ö–†–ï–¢–ù–û –í–ê–® –°–õ–£–ß–ê–ô: background-image —Å –ø—É—Ç—è–º–∏ –∫ content –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
        const newContent = content.replace(
          /background-image:\s*url\(['"]?\.\.\/img\/content\/([^'")]+\.(jpg|jpeg|png))['"]?\);/gi,
          (match, imageName, ext) => {
            console.log(
              `üé® –ù–∞—à–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: ${imageName}`
            );
            transformCount++;
            totalTransformations++;

            const baseName = imageName.replace(/\.(jpg|jpeg|png)$/i, "");

            // üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ò –ò–ó–ú–ï–ù–ï–ù–ò–ï: —É–±–∏—Ä–∞–µ–º /content/ –∏–∑ –ø—É—Ç–∏!
            return `
              /* –§–æ–ª–±—ç–∫ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤ */
              background-image: url('../img/${baseName}-desktop.jpg');

              /* –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –±—Ä–∞—É–∑–µ—Ä—ã —Å image-set –∏ —Ä–µ—Ç–∏–Ω–æ–π */
              background-image: -webkit-image-set(
                url('../img/${baseName}-desktop.avif') 1x,
                url('../img/${baseName}-retina.avif') 2x,
                url('../img/${baseName}-desktop.webp') 1x,
                url('../img/${baseName}-retina.webp') 2x
              );

              background-image: image-set(
                url('../img/${baseName}-desktop.avif') 1x,
                url('../img/${baseName}-retina.avif') 2x,
                url('../img/${baseName}-desktop.webp') 1x,
                url('../img/${baseName}-retina.webp') 2x
              );
            `.trim();
          }
        );

        if (transformCount > 0) {
          fs.writeFileSync(file, newContent, "utf-8");
          console.log(`‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ ${transformCount} background-image`);
          totalFilesProcessed++;
          transformed = true;
        }

        if (!transformed) {
          console.log(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ background-image –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è`);

          // üîç –î–ï–¢–ê–õ–¨–ù–´–ô –î–ï–ë–ê–ì: –ø–æ–∫–∞–∂–µ–º –ø–æ—á–µ–º—É –Ω–µ –Ω–∞—à–µ–ª
          const testMatch = content.match(
            /background-image:\s*url\(['"]?\.\.\/img\/content\/([^'")]+\.(jpg|jpeg|png))['"]?\);/gi
          );
          if (testMatch) {
            console.log(`üîç –ü–∞—Ç—Ç–µ—Ä–Ω –Ω–∞—à–µ–ª:`, testMatch);
          } else {
            console.log(`üîç –ü–∞—Ç—Ç–µ—Ä–Ω –Ω–µ –Ω–∞—à–µ–ª —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π`);
          }
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${file}:`, error.message);
      }
    });

    console.log(
      `\nüéâ –ò–¢–û–ì: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${totalFilesProcessed}/${scssFiles.length} —Ñ–∞–π–ª–æ–≤`
    );
    console.log(`üéâ –í—Å–µ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π: ${totalTransformations}`);
  },
};
